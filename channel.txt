import sqlite3

# Step 1: Connect to SQLite Database (or create one if it doesn't exist)
conn = sqlite3.connect('page_tree_with_metadata.db')
cursor = conn.cursor()

# Step 2: Create the page_tree table to store hierarchical relations
cursor.execute('''
CREATE TABLE IF NOT EXISTS page_tree (
    page_id INTEGER PRIMARY KEY AUTOINCREMENT,
    parent_id INTEGER,
    FOREIGN KEY (parent_id) REFERENCES page_tree(page_id) ON DELETE CASCADE
)
''')

# Step 3: Create the page_metadata table to store metadata
cursor.execute('''
CREATE TABLE IF NOT EXISTS page_metadata (
    page_id INTEGER PRIMARY KEY,
    status TEXT,
    title TEXT,
    FOREIGN KEY (page_id) REFERENCES page_tree(page_id) ON DELETE CASCADE
)
''')

conn.commit()

# Step 4: Functions to manage the hierarchy and metadata

# Add a page to the tree
def add_page(parent_id=None):
    cursor.execute('''
    INSERT INTO page_tree (parent_id)
    VALUES (?)
    ''', (parent_id,))
    conn.commit()
    return cursor.lastrowid

# Add metadata for a page
def add_metadata(page_id, status, title):
    cursor.execute('''
    INSERT INTO page_metadata (page_id, status, title)
    VALUES (?, ?, ?)
    ''', (page_id, status, title))
    conn.commit()

# Query page metadata
def get_page_metadata(page_id):
    cursor.execute('''
    SELECT * FROM page_metadata WHERE page_id = ?
    ''', (page_id,))
    return cursor.fetchone()

# Retrieve the hierarchy (all children of a given parent)
def get_child_pages(parent_id):
    cursor.execute('''
    SELECT page_id FROM page_tree WHERE parent_id = ?
    ''', (parent_id,))
    return cursor.fetchall()

# Example usage:
if __name__ == '__main__':
    # Add pages to the tree (root node)
    p1_id = add_page()
    p2_id = add_page(parent_id=p1_id)
    p3_id = add_page(parent_id=p2_id)
    p4_id = add_page(parent_id=p2_id)

    # Add metadata for pages
    add_metadata(p1_id, 'published', 'Root Page')
    add_metadata(p2_id, 'draft', 'Child Page 1')
    add_metadata(p3_id, 'draft', 'Child Page 2')
    add_metadata(p4_id, 'published', 'Child Page 3')

    # Query metadata
    print("Metadata for page 2:", get_page_metadata(p2_id))

    # Get children of p2
    print("Children of page 2:", get_child_pages(p2_id))

# Step 5: Close the connection when done
conn.close()















from mongita import MongitaClientDisk

# Step 1: Set up Mongita client (disk-based, no server needed)
client = MongitaClientDisk()
db = client.page_tree_db

# Create collections for page tree and metadata
page_tree = db.page_tree
page_metadata = db.page_metadata

# Step 2: Function to add a page (only page_id and parent_id)
def add_page(parent_id=None):
    page_id = page_tree.insert_one({
        'parent_id': parent_id
    }).inserted_id
    return page_id

# Step 3: Function to add metadata for a page
def add_metadata(page_id, status, title):
    page_metadata.insert_one({
        'page_id': page_id,
        'status': status,
        'title': title
    })

# Step 4: Function to retrieve metadata for a page
def get_page_metadata(page_id):
    return page_metadata.find_one({'page_id': page_id})

# Step 5: Function to retrieve child pages (for hierarchy)
def get_child_pages(parent_id):
    return list(page_tree.find({'parent_id': parent_id}))

# Example usage
if __name__ == '__main__':
    # Add pages to the tree (root node)
    p1_id = add_page()
    p2_id = add_page(parent_id=p1_id)
    p3_id = add_page(parent_id=p2_id)
    p4_id = add_page(parent_id=p2_id)

    # Add metadata for pages
    add_metadata(p1_id, 'published', 'Root Page')
    add_metadata(p2_id, 'draft', 'Child Page 1')
    add_metadata(p3_id, 'draft', 'Child Page 2')
    add_metadata(p4_id, 'published', 'Child Page 3')

    # Query metadata for a specific page
    print("Metadata for page 2:", get_page_metadata(p2_id))

    # Retrieve all child pages of p2
    print("Children of page 2:", get_child_pages(p2_id))

# Cleanup: Close the Mongita client when done
client.close()










I have a continuously growing page tree. Like 
p1 :{
   p2 : {
      p3 : ....
      p4: : ....
   }
, p10:{
   }

Each node has also metdatas in it. I may have query on on it. Also can add subtree / nodes etc.

Which database will best for it. It should light weight like mongita / sqllite etc. 

I plan to store the only pageid in the hiararchical form. The corresponding metadata of the page id will be stored in a seperate table. But it should be consistent. 

page_id | status | title 

